{"mappings":"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","sources":["src/js/gradient.js","src/index.js"],"sourcesContent":["function normalizeColor(hexCode) {\n  return [((hexCode >> 16) & 255) / 255, ((hexCode >> 8) & 255) / 255, (255 & hexCode) / 255];\n}\n['SCREEN', 'LINEAR_LIGHT'].reduce(\n  (hexCode, t, n) =>\n    Object.assign(hexCode, {\n      [t]: n,\n    }),\n  {}\n);\n\n//Essential functionality of WebGl\n//t = width\n//n = height\nclass MiniGl {\n  constructor(canvas, width, height, debug = false) {\n    const _miniGl = this,\n      debug_output = -1 !== document.location.search.toLowerCase().indexOf('debug=webgl');\n    (_miniGl.canvas = canvas),\n      (_miniGl.gl = _miniGl.canvas.getContext('webgl', {\n        antialias: true,\n      })),\n      (_miniGl.meshes = []);\n    const context = _miniGl.gl;\n    width && height && this.setSize(width, height),\n      _miniGl.lastDebugMsg,\n      (_miniGl.debug =\n        debug && debug_output\n          ? function (e) {\n              const t = new Date();\n              t - _miniGl.lastDebugMsg > 1e3 && console.log('---'),\n                console.log(t.toLocaleTimeString() + Array(Math.max(0, 32 - e.length)).join(' ') + e + ': ', ...Array.from(arguments).slice(1)),\n                (_miniGl.lastDebugMsg = t);\n            }\n          : () => {}),\n      Object.defineProperties(_miniGl, {\n        Material: {\n          enumerable: false,\n          value: class {\n            constructor(vertexShaders, fragments, uniforms = {}) {\n              const material = this;\n              function getShaderByType(type, source) {\n                const shader = context.createShader(type);\n                return (\n                  context.shaderSource(shader, source),\n                  context.compileShader(shader),\n                  context.getShaderParameter(shader, context.COMPILE_STATUS) || console.error(context.getShaderInfoLog(shader)),\n                  _miniGl.debug('Material.compileShaderSource', {\n                    source: source,\n                  }),\n                  shader\n                );\n              }\n              function getUniformVariableDeclarations(uniforms, type) {\n                return Object.entries(uniforms)\n                  .map(([uniform, value]) => value.getDeclaration(uniform, type))\n                  .join('\\n');\n              }\n              (material.uniforms = uniforms), (material.uniformInstances = []);\n\n              const prefix = '\\n              precision highp float;\\n            ';\n              (material.vertexSource = `\\n              ${prefix}\\n              attribute vec4 position;\\n              attribute vec2 uv;\\n              attribute vec2 uvNorm;\\n              ${getUniformVariableDeclarations(\n                _miniGl.commonUniforms,\n                'vertex'\n              )}\\n              ${getUniformVariableDeclarations(uniforms, 'vertex')}\\n              ${vertexShaders}\\n            `),\n                (material.Source = `\\n              ${prefix}\\n              ${getUniformVariableDeclarations(\n                  _miniGl.commonUniforms,\n                  'fragment'\n                )}\\n              ${getUniformVariableDeclarations(uniforms, 'fragment')}\\n              ${fragments}\\n            `),\n                (material.vertexShader = getShaderByType(context.VERTEX_SHADER, material.vertexSource)),\n                (material.fragmentShader = getShaderByType(context.FRAGMENT_SHADER, material.Source)),\n                (material.program = context.createProgram()),\n                context.attachShader(material.program, material.vertexShader),\n                context.attachShader(material.program, material.fragmentShader),\n                context.linkProgram(material.program),\n                context.getProgramParameter(material.program, context.LINK_STATUS) || console.error(context.getProgramInfoLog(material.program)),\n                context.useProgram(material.program),\n                material.attachUniforms(void 0, _miniGl.commonUniforms),\n                material.attachUniforms(void 0, material.uniforms);\n            }\n            //t = uniform\n            attachUniforms(name, uniforms) {\n              //n  = material\n              const material = this;\n              void 0 === name\n                ? Object.entries(uniforms).forEach(([name, uniform]) => {\n                    material.attachUniforms(name, uniform);\n                  })\n                : 'array' == uniforms.type\n                ? uniforms.value.forEach((uniform, i) => material.attachUniforms(`${name}[${i}]`, uniform))\n                : 'struct' == uniforms.type\n                ? Object.entries(uniforms.value).forEach(([uniform, i]) => material.attachUniforms(`${name}.${uniform}`, i))\n                : (_miniGl.debug('Material.attachUniforms', {\n                    name: name,\n                    uniform: uniforms,\n                  }),\n                  material.uniformInstances.push({\n                    uniform: uniforms,\n                    location: context.getUniformLocation(material.program, name),\n                  }));\n            }\n          },\n        },\n        Uniform: {\n          enumerable: !1,\n          value: class {\n            constructor(e) {\n              (this.type = 'float'), Object.assign(this, e);\n              (this.typeFn =\n                {\n                  float: '1f',\n                  int: '1i',\n                  vec2: '2fv',\n                  vec3: '3fv',\n                  vec4: '4fv',\n                  mat4: 'Matrix4fv',\n                }[this.type] || '1f'),\n                this.update();\n            }\n            update(value) {\n              void 0 !== this.value &&\n                context[`uniform${this.typeFn}`](\n                  value,\n                  0 === this.typeFn.indexOf('Matrix') ? this.transpose : this.value,\n                  0 === this.typeFn.indexOf('Matrix') ? this.value : null\n                );\n            }\n            //e - name\n            //t - type\n            //n - length\n            getDeclaration(name, type, length) {\n              const uniform = this;\n              if (uniform.excludeFrom !== type) {\n                if ('array' === uniform.type)\n                  return uniform.value[0].getDeclaration(name, type, uniform.value.length) + `\\nconst int ${name}_length = ${uniform.value.length};`;\n                if ('struct' === uniform.type) {\n                  let name_no_prefix = name.replace('u_', '');\n                  return (\n                    (name_no_prefix = name_no_prefix.charAt(0).toUpperCase() + name_no_prefix.slice(1)),\n                    `uniform struct ${name_no_prefix} \n                                {\\n` +\n                      Object.entries(uniform.value)\n                        .map(([name, uniform]) => uniform.getDeclaration(name, type).replace(/^uniform/, ''))\n                        .join('') +\n                      `\\n} ${name}${length > 0 ? `[${length}]` : ''};`\n                  );\n                }\n                return `uniform ${uniform.type} ${name}${length > 0 ? `[${length}]` : ''};`;\n              }\n            }\n          },\n        },\n        PlaneGeometry: {\n          enumerable: !1,\n          value: class {\n            constructor(width, height, n, i, orientation) {\n              context.createBuffer(),\n                (this.attributes = {\n                  position: new _miniGl.Attribute({\n                    target: context.ARRAY_BUFFER,\n                    size: 3,\n                  }),\n                  uv: new _miniGl.Attribute({\n                    target: context.ARRAY_BUFFER,\n                    size: 2,\n                  }),\n                  uvNorm: new _miniGl.Attribute({\n                    target: context.ARRAY_BUFFER,\n                    size: 2,\n                  }),\n                  index: new _miniGl.Attribute({\n                    target: context.ELEMENT_ARRAY_BUFFER,\n                    size: 3,\n                    type: context.UNSIGNED_SHORT,\n                  }),\n                }),\n                this.setTopology(n, i),\n                this.setSize(width, height, orientation);\n            }\n            setTopology(e = 1, t = 1) {\n              const n = this;\n              (n.xSegCount = e),\n                (n.ySegCount = t),\n                (n.vertexCount = (n.xSegCount + 1) * (n.ySegCount + 1)),\n                (n.quadCount = n.xSegCount * n.ySegCount * 2),\n                (n.attributes.uv.values = new Float32Array(2 * n.vertexCount)),\n                (n.attributes.uvNorm.values = new Float32Array(2 * n.vertexCount)),\n                (n.attributes.index.values = new Uint16Array(3 * n.quadCount));\n              for (let e = 0; e <= n.ySegCount; e++)\n                for (let t = 0; t <= n.xSegCount; t++) {\n                  const i = e * (n.xSegCount + 1) + t;\n                  if (\n                    ((n.attributes.uv.values[2 * i] = t / n.xSegCount),\n                    (n.attributes.uv.values[2 * i + 1] = 1 - e / n.ySegCount),\n                    (n.attributes.uvNorm.values[2 * i] = (t / n.xSegCount) * 2 - 1),\n                    (n.attributes.uvNorm.values[2 * i + 1] = 1 - (e / n.ySegCount) * 2),\n                    t < n.xSegCount && e < n.ySegCount)\n                  ) {\n                    const s = e * n.xSegCount + t;\n                    (n.attributes.index.values[6 * s] = i),\n                      (n.attributes.index.values[6 * s + 1] = i + 1 + n.xSegCount),\n                      (n.attributes.index.values[6 * s + 2] = i + 1),\n                      (n.attributes.index.values[6 * s + 3] = i + 1),\n                      (n.attributes.index.values[6 * s + 4] = i + 1 + n.xSegCount),\n                      (n.attributes.index.values[6 * s + 5] = i + 2 + n.xSegCount);\n                  }\n                }\n              n.attributes.uv.update(),\n                n.attributes.uvNorm.update(),\n                n.attributes.index.update(),\n                _miniGl.debug('Geometry.setTopology', {\n                  uv: n.attributes.uv,\n                  uvNorm: n.attributes.uvNorm,\n                  index: n.attributes.index,\n                });\n            }\n            setSize(width = 1, height = 1, orientation = 'xz') {\n              const geometry = this;\n              (geometry.width = width),\n                (geometry.height = height),\n                (geometry.orientation = orientation),\n                (geometry.attributes.position.values && geometry.attributes.position.values.length === 3 * geometry.vertexCount) ||\n                  (geometry.attributes.position.values = new Float32Array(3 * geometry.vertexCount));\n              const o = width / -2,\n                r = height / -2,\n                segment_width = width / geometry.xSegCount,\n                segment_height = height / geometry.ySegCount;\n              for (let yIndex = 0; yIndex <= geometry.ySegCount; yIndex++) {\n                const t = r + yIndex * segment_height;\n                for (let xIndex = 0; xIndex <= geometry.xSegCount; xIndex++) {\n                  const r = o + xIndex * segment_width,\n                    l = yIndex * (geometry.xSegCount + 1) + xIndex;\n                  (geometry.attributes.position.values[3 * l + 'xyz'.indexOf(orientation[0])] = r),\n                    (geometry.attributes.position.values[3 * l + 'xyz'.indexOf(orientation[1])] = -t);\n                }\n              }\n              geometry.attributes.position.update(),\n                _miniGl.debug('Geometry.setSize', {\n                  position: geometry.attributes.position,\n                });\n            }\n          },\n        },\n        Mesh: {\n          enumerable: !1,\n          value: class {\n            constructor(geometry, material) {\n              const mesh = this;\n              (mesh.geometry = geometry),\n                (mesh.material = material),\n                (mesh.wireframe = !1),\n                (mesh.attributeInstances = []),\n                Object.entries(mesh.geometry.attributes).forEach(([e, attribute]) => {\n                  mesh.attributeInstances.push({\n                    attribute: attribute,\n                    location: attribute.attach(e, mesh.material.program),\n                  });\n                }),\n                _miniGl.meshes.push(mesh),\n                _miniGl.debug('Mesh.constructor', {\n                  mesh: mesh,\n                });\n            }\n            draw() {\n              context.useProgram(this.material.program),\n                this.material.uniformInstances.forEach(({ uniform: e, location: t }) => e.update(t)),\n                this.attributeInstances.forEach(({ attribute: e, location: t }) => e.use(t)),\n                context.drawElements(\n                  this.wireframe ? context.LINES : context.TRIANGLES,\n                  this.geometry.attributes.index.values.length,\n                  context.UNSIGNED_SHORT,\n                  0\n                );\n            }\n            remove() {\n              _miniGl.meshes = _miniGl.meshes.filter(e => e != this);\n            }\n          },\n        },\n        Attribute: {\n          enumerable: !1,\n          value: class {\n            constructor(e) {\n              (this.type = context.FLOAT), (this.normalized = !1), (this.buffer = context.createBuffer()), Object.assign(this, e), this.update();\n            }\n            update() {\n              void 0 !== this.values &&\n                (context.bindBuffer(this.target, this.buffer), context.bufferData(this.target, this.values, context.STATIC_DRAW));\n            }\n            attach(e, t) {\n              const n = context.getAttribLocation(t, e);\n              return (\n                this.target === context.ARRAY_BUFFER &&\n                  (context.enableVertexAttribArray(n), context.vertexAttribPointer(n, this.size, this.type, this.normalized, 0, 0)),\n                n\n              );\n            }\n            use(e) {\n              context.bindBuffer(this.target, this.buffer),\n                this.target === context.ARRAY_BUFFER &&\n                  (context.enableVertexAttribArray(e), context.vertexAttribPointer(e, this.size, this.type, this.normalized, 0, 0));\n            }\n          },\n        },\n      });\n    const a = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n    _miniGl.commonUniforms = {\n      projectionMatrix: new _miniGl.Uniform({\n        type: 'mat4',\n        value: a,\n      }),\n      modelViewMatrix: new _miniGl.Uniform({\n        type: 'mat4',\n        value: a,\n      }),\n      resolution: new _miniGl.Uniform({\n        type: 'vec2',\n        value: [1, 1],\n      }),\n      aspectRatio: new _miniGl.Uniform({\n        type: 'float',\n        value: 1,\n      }),\n    };\n  }\n  setSize(e = 640, t = 480) {\n    (this.width = e),\n      (this.height = t),\n      (this.canvas.width = e),\n      (this.canvas.height = t),\n      this.gl.viewport(0, 0, e, t),\n      (this.commonUniforms.resolution.value = [e, t]),\n      (this.commonUniforms.aspectRatio.value = e / t),\n      this.debug('MiniGL.setSize', {\n        width: e,\n        height: t,\n      });\n  }\n  //left, right, top, bottom, near, far\n  setOrthographicCamera(e = 0, t = 0, n = 0, i = -2e3, s = 2e3) {\n    (this.commonUniforms.projectionMatrix.value = [2 / this.width, 0, 0, 0, 0, 2 / this.height, 0, 0, 0, 0, 2 / (i - s), 0, e, t, n, 1]),\n      this.debug('setOrthographicCamera', this.commonUniforms.projectionMatrix.value);\n  }\n  render() {\n    this.gl.clearColor(0, 0, 0, 0), this.gl.clearDepth(1), this.meshes.forEach(e => e.draw());\n  }\n}\n\n//Sets initial properties\nfunction e(object, propertyName, val) {\n  return (\n    propertyName in object\n      ? Object.defineProperty(object, propertyName, {\n          value: val,\n          enumerable: !0,\n          configurable: !0,\n          writable: !0,\n        })\n      : (object[propertyName] = val),\n    object\n  );\n}\n\n//Gradient object\nclass Gradient {\n  constructor(...t) {\n    e(this, 'el', void 0),\n      e(this, 'cssVarRetries', 0),\n      e(this, 'maxCssVarRetries', 200),\n      e(this, 'angle', 0),\n      e(this, 'isLoadedClass', !1),\n      e(this, 'isScrolling', !1),\n      /*e(this, \"isStatic\", o.disableAmbientAnimations()),*/ e(this, 'scrollingTimeout', void 0),\n      e(this, 'scrollingRefreshDelay', 200),\n      e(this, 'isIntersecting', !1),\n      e(this, 'shaderFiles', void 0),\n      e(this, 'vertexShader', void 0),\n      e(this, 'sectionColors', void 0),\n      e(this, 'computedCanvasStyle', void 0),\n      e(this, 'conf', void 0),\n      e(this, 'uniforms', void 0),\n      e(this, 't', 1253106),\n      e(this, 'last', 0),\n      e(this, 'width', void 0),\n      e(this, 'minWidth', 1111),\n      e(this, 'height', 600),\n      e(this, 'xSegCount', void 0),\n      e(this, 'ySegCount', void 0),\n      e(this, 'mesh', void 0),\n      e(this, 'material', void 0),\n      e(this, 'geometry', void 0),\n      e(this, 'minigl', void 0),\n      e(this, 'scrollObserver', void 0),\n      e(this, 'amp', 320),\n      e(this, 'seed', 5),\n      e(this, 'freqX', 14e-5),\n      e(this, 'freqY', 29e-5),\n      e(this, 'freqDelta', 1e-5),\n      e(this, 'activeColors', [1, 1, 1, 1]),\n      e(this, 'isMetaKey', !1),\n      e(this, 'isGradientLegendVisible', !1),\n      e(this, 'isMouseDown', !1),\n      e(this, 'handleScroll', () => {\n        clearTimeout(this.scrollingTimeout),\n          (this.scrollingTimeout = setTimeout(this.handleScrollEnd, this.scrollingRefreshDelay)),\n          this.isGradientLegendVisible && this.hideGradientLegend(),\n          this.conf.playing && ((this.isScrolling = !0), this.pause());\n      }),\n      e(this, 'handleScrollEnd', () => {\n        (this.isScrolling = !1), this.isIntersecting && this.play();\n      }),\n      e(this, 'resize', () => {\n        (this.width = window.innerWidth),\n          this.minigl.setSize(this.width, this.height),\n          this.minigl.setOrthographicCamera(),\n          (this.xSegCount = Math.ceil(this.width * this.conf.density[0])),\n          (this.ySegCount = Math.ceil(this.height * this.conf.density[1])),\n          this.mesh.geometry.setTopology(this.xSegCount, this.ySegCount),\n          this.mesh.geometry.setSize(this.width, this.height),\n          (this.mesh.material.uniforms.u_shadow_power.value = this.width < 600 ? 5 : 6);\n      }),\n      e(this, 'handleMouseDown', e => {\n        this.isGradientLegendVisible &&\n          ((this.isMetaKey = e.metaKey), (this.isMouseDown = !0), !1 === this.conf.playing && requestAnimationFrame(this.animate));\n      }),\n      e(this, 'handleMouseUp', () => {\n        this.isMouseDown = !1;\n      }),\n      e(this, 'animate', e => {\n        if (!this.shouldSkipFrame(e) || this.isMouseDown) {\n          if (((this.t += Math.min(e - this.last, 1e3 / 15)), (this.last = e), this.isMouseDown)) {\n            let e = 160;\n            this.isMetaKey && (e = -160), (this.t += e);\n          }\n          (this.mesh.material.uniforms.u_time.value = this.t), this.minigl.render();\n        }\n        if (0 !== this.last && this.isStatic) return this.minigl.render(), void this.disconnect();\n        /*this.isIntersecting && */ (this.conf.playing || this.isMouseDown) && requestAnimationFrame(this.animate);\n      }),\n      e(this, 'addIsLoadedClass', () => {\n        /*this.isIntersecting && */ !this.isLoadedClass &&\n          ((this.isLoadedClass = !0),\n          this.el.classList.add('isLoaded'),\n          setTimeout(() => {\n            this.el.parentElement.classList.add('isLoaded');\n          }, 3e3));\n      }),\n      e(this, 'pause', () => {\n        this.conf.playing = false;\n      }),\n      e(this, 'play', () => {\n        requestAnimationFrame(this.animate), (this.conf.playing = true);\n      }),\n      e(this, 'initGradient', selector => {\n        this.el = document.querySelector(selector);\n        this.connect();\n        return this;\n      });\n  }\n  async connect() {\n    (this.shaderFiles = {\n      vertex:\n        'varying vec3 v_color;\\n\\nvoid main() {\\n  float time = u_time * u_global.noiseSpeed;\\n\\n  vec2 noiseCoord = resolution * uvNorm * u_global.noiseFreq;\\n\\n  vec2 st = 1. - uvNorm.xy;\\n\\n  //\\n  // Tilting the plane\\n  //\\n\\n  // Front-to-back tilt\\n  float tilt = resolution.y / 2.0 * uvNorm.y;\\n\\n  // Left-to-right angle\\n  float incline = resolution.x * uvNorm.x / 2.0 * u_vertDeform.incline;\\n\\n  // Up-down shift to offset incline\\n  float offset = resolution.x / 2.0 * u_vertDeform.incline * mix(u_vertDeform.offsetBottom, u_vertDeform.offsetTop, uv.y);\\n\\n  //\\n  // Vertex noise\\n  //\\n\\n  float noise = snoise(vec3(\\n    noiseCoord.x * u_vertDeform.noiseFreq.x + time * u_vertDeform.noiseFlow,\\n    noiseCoord.y * u_vertDeform.noiseFreq.y,\\n    time * u_vertDeform.noiseSpeed + u_vertDeform.noiseSeed\\n  )) * u_vertDeform.noiseAmp;\\n\\n  // Fade noise to zero at edges\\n  noise *= 1.0 - pow(abs(uvNorm.y), 2.0);\\n\\n  // Clamp to 0\\n  noise = max(0.0, noise);\\n\\n  vec3 pos = vec3(\\n    position.x,\\n    position.y + tilt + incline + noise - offset,\\n    position.z\\n  );\\n\\n  //\\n  // Vertex color, to be passed to fragment shader\\n  //\\n\\n  if (u_active_colors[0] == 1.) {\\n    v_color = u_baseColor;\\n  }\\n\\n  for (int i = 0; i < u_waveLayers_length; i++) {\\n    if (u_active_colors[i + 1] == 1.) {\\n      WaveLayers layer = u_waveLayers[i];\\n\\n      float noise = smoothstep(\\n        layer.noiseFloor,\\n        layer.noiseCeil,\\n        snoise(vec3(\\n          noiseCoord.x * layer.noiseFreq.x + time * layer.noiseFlow,\\n          noiseCoord.y * layer.noiseFreq.y,\\n          time * layer.noiseSpeed + layer.noiseSeed\\n        )) / 2.0 + 0.5\\n      );\\n\\n      v_color = blendNormal(v_color, layer.color, pow(noise, 4.));\\n    }\\n  }\\n\\n  //\\n  // Finish\\n  //\\n\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\\n}',\n      noise:\n        '//\\n// Description : Array and textureless GLSL 2D/3D/4D simplex\\n//               noise functions.\\n//      Author : Ian McEwan, Ashima Arts.\\n//  Maintainer : stegu\\n//     Lastmod : 20110822 (ijm)\\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\\n//               Distributed under the MIT License. See LICENSE file.\\n//               https://github.com/ashima/webgl-noise\\n//               https://github.com/stegu/webgl-noise\\n//\\n\\nvec3 mod289(vec3 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec4 mod289(vec4 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec4 permute(vec4 x) {\\n    return mod289(((x*34.0)+1.0)*x);\\n}\\n\\nvec4 taylorInvSqrt(vec4 r)\\n{\\n  return 1.79284291400159 - 0.85373472095314 * r;\\n}\\n\\nfloat snoise(vec3 v)\\n{\\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\\n\\n// First corner\\n  vec3 i  = floor(v + dot(v, C.yyy) );\\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\\n\\n// Other corners\\n  vec3 g = step(x0.yzx, x0.xyz);\\n  vec3 l = 1.0 - g;\\n  vec3 i1 = min( g.xyz, l.zxy );\\n  vec3 i2 = max( g.xyz, l.zxy );\\n\\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\\n  vec3 x1 = x0 - i1 + C.xxx;\\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\\n\\n// Permutations\\n  i = mod289(i);\\n  vec4 p = permute( permute( permute(\\n            i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\\n          + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\\n          + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\\n\\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\\n  float n_ = 0.142857142857; // 1.0/7.0\\n  vec3  ns = n_ * D.wyz - D.xzx;\\n\\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\\n\\n  vec4 x_ = floor(j * ns.z);\\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\\n\\n  vec4 x = x_ *ns.x + ns.yyyy;\\n  vec4 y = y_ *ns.x + ns.yyyy;\\n  vec4 h = 1.0 - abs(x) - abs(y);\\n\\n  vec4 b0 = vec4( x.xy, y.xy );\\n  vec4 b1 = vec4( x.zw, y.zw );\\n\\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\\n  vec4 s0 = floor(b0)*2.0 + 1.0;\\n  vec4 s1 = floor(b1)*2.0 + 1.0;\\n  vec4 sh = -step(h, vec4(0.0));\\n\\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\\n\\n  vec3 p0 = vec3(a0.xy,h.x);\\n  vec3 p1 = vec3(a0.zw,h.y);\\n  vec3 p2 = vec3(a1.xy,h.z);\\n  vec3 p3 = vec3(a1.zw,h.w);\\n\\n//Normalise gradients\\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\\n  p0 *= norm.x;\\n  p1 *= norm.y;\\n  p2 *= norm.z;\\n  p3 *= norm.w;\\n\\n// Mix final noise value\\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\\n  m = m * m;\\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\\n                                dot(p2,x2), dot(p3,x3) ) );\\n}',\n      blend:\n        '//\\n// https://github.com/jamieowen/glsl-blend\\n//\\n\\n// Normal\\n\\nvec3 blendNormal(vec3 base, vec3 blend) {\\n\\treturn blend;\\n}\\n\\nvec3 blendNormal(vec3 base, vec3 blend, float opacity) {\\n\\treturn (blendNormal(base, blend) * opacity + base * (1.0 - opacity));\\n}\\n\\n// Screen\\n\\nfloat blendScreen(float base, float blend) {\\n\\treturn 1.0-((1.0-base)*(1.0-blend));\\n}\\n\\nvec3 blendScreen(vec3 base, vec3 blend) {\\n\\treturn vec3(blendScreen(base.r,blend.r),blendScreen(base.g,blend.g),blendScreen(base.b,blend.b));\\n}\\n\\nvec3 blendScreen(vec3 base, vec3 blend, float opacity) {\\n\\treturn (blendScreen(base, blend) * opacity + base * (1.0 - opacity));\\n}\\n\\n// Multiply\\n\\nvec3 blendMultiply(vec3 base, vec3 blend) {\\n\\treturn base*blend;\\n}\\n\\nvec3 blendMultiply(vec3 base, vec3 blend, float opacity) {\\n\\treturn (blendMultiply(base, blend) * opacity + base * (1.0 - opacity));\\n}\\n\\n// Overlay\\n\\nfloat blendOverlay(float base, float blend) {\\n\\treturn base<0.5?(2.0*base*blend):(1.0-2.0*(1.0-base)*(1.0-blend));\\n}\\n\\nvec3 blendOverlay(vec3 base, vec3 blend) {\\n\\treturn vec3(blendOverlay(base.r,blend.r),blendOverlay(base.g,blend.g),blendOverlay(base.b,blend.b));\\n}\\n\\nvec3 blendOverlay(vec3 base, vec3 blend, float opacity) {\\n\\treturn (blendOverlay(base, blend) * opacity + base * (1.0 - opacity));\\n}\\n\\n// Hard light\\n\\nvec3 blendHardLight(vec3 base, vec3 blend) {\\n\\treturn blendOverlay(blend,base);\\n}\\n\\nvec3 blendHardLight(vec3 base, vec3 blend, float opacity) {\\n\\treturn (blendHardLight(base, blend) * opacity + base * (1.0 - opacity));\\n}\\n\\n// Soft light\\n\\nfloat blendSoftLight(float base, float blend) {\\n\\treturn (blend<0.5)?(2.0*base*blend+base*base*(1.0-2.0*blend)):(sqrt(base)*(2.0*blend-1.0)+2.0*base*(1.0-blend));\\n}\\n\\nvec3 blendSoftLight(vec3 base, vec3 blend) {\\n\\treturn vec3(blendSoftLight(base.r,blend.r),blendSoftLight(base.g,blend.g),blendSoftLight(base.b,blend.b));\\n}\\n\\nvec3 blendSoftLight(vec3 base, vec3 blend, float opacity) {\\n\\treturn (blendSoftLight(base, blend) * opacity + base * (1.0 - opacity));\\n}\\n\\n// Color dodge\\n\\nfloat blendColorDodge(float base, float blend) {\\n\\treturn (blend==1.0)?blend:min(base/(1.0-blend),1.0);\\n}\\n\\nvec3 blendColorDodge(vec3 base, vec3 blend) {\\n\\treturn vec3(blendColorDodge(base.r,blend.r),blendColorDodge(base.g,blend.g),blendColorDodge(base.b,blend.b));\\n}\\n\\nvec3 blendColorDodge(vec3 base, vec3 blend, float opacity) {\\n\\treturn (blendColorDodge(base, blend) * opacity + base * (1.0 - opacity));\\n}\\n\\n// Color burn\\n\\nfloat blendColorBurn(float base, float blend) {\\n\\treturn (blend==0.0)?blend:max((1.0-((1.0-base)/blend)),0.0);\\n}\\n\\nvec3 blendColorBurn(vec3 base, vec3 blend) {\\n\\treturn vec3(blendColorBurn(base.r,blend.r),blendColorBurn(base.g,blend.g),blendColorBurn(base.b,blend.b));\\n}\\n\\nvec3 blendColorBurn(vec3 base, vec3 blend, float opacity) {\\n\\treturn (blendColorBurn(base, blend) * opacity + base * (1.0 - opacity));\\n}\\n\\n// Vivid Light\\n\\nfloat blendVividLight(float base, float blend) {\\n\\treturn (blend<0.5)?blendColorBurn(base,(2.0*blend)):blendColorDodge(base,(2.0*(blend-0.5)));\\n}\\n\\nvec3 blendVividLight(vec3 base, vec3 blend) {\\n\\treturn vec3(blendVividLight(base.r,blend.r),blendVividLight(base.g,blend.g),blendVividLight(base.b,blend.b));\\n}\\n\\nvec3 blendVividLight(vec3 base, vec3 blend, float opacity) {\\n\\treturn (blendVividLight(base, blend) * opacity + base * (1.0 - opacity));\\n}\\n\\n// Lighten\\n\\nfloat blendLighten(float base, float blend) {\\n\\treturn max(blend,base);\\n}\\n\\nvec3 blendLighten(vec3 base, vec3 blend) {\\n\\treturn vec3(blendLighten(base.r,blend.r),blendLighten(base.g,blend.g),blendLighten(base.b,blend.b));\\n}\\n\\nvec3 blendLighten(vec3 base, vec3 blend, float opacity) {\\n\\treturn (blendLighten(base, blend) * opacity + base * (1.0 - opacity));\\n}\\n\\n// Linear burn\\n\\nfloat blendLinearBurn(float base, float blend) {\\n\\t// Note : Same implementation as BlendSubtractf\\n\\treturn max(base+blend-1.0,0.0);\\n}\\n\\nvec3 blendLinearBurn(vec3 base, vec3 blend) {\\n\\t// Note : Same implementation as BlendSubtract\\n\\treturn max(base+blend-vec3(1.0),vec3(0.0));\\n}\\n\\nvec3 blendLinearBurn(vec3 base, vec3 blend, float opacity) {\\n\\treturn (blendLinearBurn(base, blend) * opacity + base * (1.0 - opacity));\\n}\\n\\n// Linear dodge\\n\\nfloat blendLinearDodge(float base, float blend) {\\n\\t// Note : Same implementation as BlendAddf\\n\\treturn min(base+blend,1.0);\\n}\\n\\nvec3 blendLinearDodge(vec3 base, vec3 blend) {\\n\\t// Note : Same implementation as BlendAdd\\n\\treturn min(base+blend,vec3(1.0));\\n}\\n\\nvec3 blendLinearDodge(vec3 base, vec3 blend, float opacity) {\\n\\treturn (blendLinearDodge(base, blend) * opacity + base * (1.0 - opacity));\\n}\\n\\n// Linear light\\n\\nfloat blendLinearLight(float base, float blend) {\\n\\treturn blend<0.5?blendLinearBurn(base,(2.0*blend)):blendLinearDodge(base,(2.0*(blend-0.5)));\\n}\\n\\nvec3 blendLinearLight(vec3 base, vec3 blend) {\\n\\treturn vec3(blendLinearLight(base.r,blend.r),blendLinearLight(base.g,blend.g),blendLinearLight(base.b,blend.b));\\n}\\n\\nvec3 blendLinearLight(vec3 base, vec3 blend, float opacity) {\\n\\treturn (blendLinearLight(base, blend) * opacity + base * (1.0 - opacity));\\n}',\n      fragment:\n        'varying vec3 v_color;\\n\\nvoid main() {\\n  vec3 color = v_color;\\n  if (u_darken_top == 1.0) {\\n    vec2 st = gl_FragCoord.xy/resolution.xy;\\n    color.g -= pow(st.y + sin(-12.0) * st.x, u_shadow_power) * 0.4;\\n  }\\n  gl_FragColor = vec4(color, 1.0);\\n}',\n    }),\n      (this.conf = {\n        presetName: '',\n        wireframe: false,\n        density: [0.06, 0.16],\n        zoom: 1,\n        rotation: 0,\n        playing: true,\n      }),\n      document.querySelectorAll('canvas').length < 1\n        ? console.log('DID NOT LOAD HERO STRIPE CANVAS')\n        : ((this.minigl = new MiniGl(this.el, null, null, !0)),\n          requestAnimationFrame(() => {\n            this.el && ((this.computedCanvasStyle = getComputedStyle(this.el)), this.waitForCssVars());\n          }));\n    /*\n        this.scrollObserver = await s.create(.1, !1),\n        this.scrollObserver.observe(this.el),\n        this.scrollObserver.onSeparate(() => {\n            window.removeEventListener(\"scroll\", this.handleScroll), window.removeEventListener(\"mousedown\", this.handleMouseDown), window.removeEventListener(\"mouseup\", this.handleMouseUp), window.removeEventListener(\"keydown\", this.handleKeyDown), this.isIntersecting = !1, this.conf.playing && this.pause()\n        }), \n        this.scrollObserver.onIntersect(() => {\n            window.addEventListener(\"scroll\", this.handleScroll), window.addEventListener(\"mousedown\", this.handleMouseDown), window.addEventListener(\"mouseup\", this.handleMouseUp), window.addEventListener(\"keydown\", this.handleKeyDown), this.isIntersecting = !0, this.addIsLoadedClass(), this.play()\n        })*/\n  }\n  disconnect() {\n    this.scrollObserver &&\n      (window.removeEventListener('scroll', this.handleScroll),\n      window.removeEventListener('mousedown', this.handleMouseDown),\n      window.removeEventListener('mouseup', this.handleMouseUp),\n      window.removeEventListener('keydown', this.handleKeyDown),\n      this.scrollObserver.disconnect()),\n      window.removeEventListener('resize', this.resize);\n  }\n  initMaterial() {\n    this.uniforms = {\n      u_time: new this.minigl.Uniform({\n        value: 0,\n      }),\n      u_shadow_power: new this.minigl.Uniform({\n        value: 5,\n      }),\n      u_darken_top: new this.minigl.Uniform({\n        value: '' === this.el.dataset.jsDarkenTop ? 1 : 0,\n      }),\n      u_active_colors: new this.minigl.Uniform({\n        value: this.activeColors,\n        type: 'vec4',\n      }),\n      u_global: new this.minigl.Uniform({\n        value: {\n          noiseFreq: new this.minigl.Uniform({\n            value: [this.freqX, this.freqY],\n            type: 'vec2',\n          }),\n          noiseSpeed: new this.minigl.Uniform({\n            value: 5e-6,\n          }),\n        },\n        type: 'struct',\n      }),\n      u_vertDeform: new this.minigl.Uniform({\n        value: {\n          incline: new this.minigl.Uniform({\n            value: Math.sin(this.angle) / Math.cos(this.angle),\n          }),\n          offsetTop: new this.minigl.Uniform({\n            value: -0.5,\n          }),\n          offsetBottom: new this.minigl.Uniform({\n            value: -0.5,\n          }),\n          noiseFreq: new this.minigl.Uniform({\n            value: [3, 4],\n            type: 'vec2',\n          }),\n          noiseAmp: new this.minigl.Uniform({\n            value: this.amp,\n          }),\n          noiseSpeed: new this.minigl.Uniform({\n            value: 10,\n          }),\n          noiseFlow: new this.minigl.Uniform({\n            value: 3,\n          }),\n          noiseSeed: new this.minigl.Uniform({\n            value: this.seed,\n          }),\n        },\n        type: 'struct',\n        excludeFrom: 'fragment',\n      }),\n      u_baseColor: new this.minigl.Uniform({\n        value: this.sectionColors[0],\n        type: 'vec3',\n        excludeFrom: 'fragment',\n      }),\n      u_waveLayers: new this.minigl.Uniform({\n        value: [],\n        excludeFrom: 'fragment',\n        type: 'array',\n      }),\n    };\n    for (let e = 1; e < this.sectionColors.length; e += 1)\n      this.uniforms.u_waveLayers.value.push(\n        new this.minigl.Uniform({\n          value: {\n            color: new this.minigl.Uniform({\n              value: this.sectionColors[e],\n              type: 'vec3',\n            }),\n            noiseFreq: new this.minigl.Uniform({\n              value: [2 + e / this.sectionColors.length, 3 + e / this.sectionColors.length],\n              type: 'vec2',\n            }),\n            noiseSpeed: new this.minigl.Uniform({\n              value: 11 + 0.3 * e,\n            }),\n            noiseFlow: new this.minigl.Uniform({\n              value: 6.5 + 0.3 * e,\n            }),\n            noiseSeed: new this.minigl.Uniform({\n              value: this.seed + 10 * e,\n            }),\n            noiseFloor: new this.minigl.Uniform({\n              value: 0.1,\n            }),\n            noiseCeil: new this.minigl.Uniform({\n              value: 0.63 + 0.07 * e,\n            }),\n          },\n          type: 'struct',\n        })\n      );\n    return (\n      (this.vertexShader = [this.shaderFiles.noise, this.shaderFiles.blend, this.shaderFiles.vertex].join('\\n\\n')),\n      new this.minigl.Material(this.vertexShader, this.shaderFiles.fragment, this.uniforms)\n    );\n  }\n  initMesh() {\n    (this.material = this.initMaterial()),\n      (this.geometry = new this.minigl.PlaneGeometry()),\n      (this.mesh = new this.minigl.Mesh(this.geometry, this.material));\n  }\n  shouldSkipFrame(e) {\n    return !!window.document.hidden || !this.conf.playing || parseInt(e, 10) % 2 == 0 || void 0;\n  }\n  updateFrequency(e) {\n    (this.freqX += e), (this.freqY += e);\n  }\n  toggleColor(index) {\n    this.activeColors[index] = 0 === this.activeColors[index] ? 1 : 0;\n  }\n  showGradientLegend() {\n    this.width > this.minWidth && ((this.isGradientLegendVisible = !0), document.body.classList.add('isGradientLegendVisible'));\n  }\n  hideGradientLegend() {\n    (this.isGradientLegendVisible = !1), document.body.classList.remove('isGradientLegendVisible');\n  }\n  init() {\n    this.initGradientColors(), this.initMesh(), this.resize(), requestAnimationFrame(this.animate), window.addEventListener('resize', this.resize);\n  }\n  /*\n   * Waiting for the css variables to become available, usually on page load before we can continue.\n   * Using default colors assigned below if no variables have been found after maxCssVarRetries\n   */\n  waitForCssVars() {\n    if (this.computedCanvasStyle && -1 !== this.computedCanvasStyle.getPropertyValue('--gradient-color-1').indexOf('#'))\n      this.init(), this.addIsLoadedClass();\n    else {\n      if (((this.cssVarRetries += 1), this.cssVarRetries > this.maxCssVarRetries)) {\n        return (this.sectionColors = [16711680, 16711680, 16711935, 65280, 255]), void this.init();\n      }\n      requestAnimationFrame(() => this.waitForCssVars());\n    }\n  }\n  /*\n   * Initializes the four section colors by retrieving them from css variables.\n   */\n  initGradientColors() {\n    this.sectionColors = ['--gradient-color-1', '--gradient-color-2', '--gradient-color-3', '--gradient-color-4']\n      .map(cssPropertyName => {\n        let hex = this.computedCanvasStyle.getPropertyValue(cssPropertyName).trim();\n        //Check if shorthand hex value was used and double the length so the conversion in normalizeColor will work.\n        if (4 === hex.length) {\n          const hexTemp = hex\n            .substr(1)\n            .split('')\n            .map(hexTemp => hexTemp + hexTemp)\n            .join('');\n          hex = `#${hexTemp}`;\n        }\n        return hex && `0x${hex.substr(1)}`;\n      })\n      .filter(Boolean)\n      .map(normalizeColor);\n  }\n}\n\nexport { Gradient };\n","import { Gradient } from './js/gradient';\nconst gradient = new Gradient();\ngradient.initGradient('#gradient-canvas');\n"],"names":["$bbd9f92d73e75074$var$normalizeColor","hexCode","reduce","t","n","Object","assign","$bbd9f92d73e75074$var$MiniGl","setSize","e1","this","width","height","canvas","gl","viewport","commonUniforms","resolution","value","aspectRatio","debug","setOrthographicCamera","e2","i","s","projectionMatrix","render","clearColor","clearDepth","meshes","forEach","e3","draw","constructor","width1","height1","_miniGl","debug_output","document","location","search","toLowerCase","indexOf","getContext","antialias","context","lastDebugMsg","e4","Date","console","log","toLocaleTimeString","Array","Math","max","length","join","from","arguments","slice","defineProperties","Material","enumerable","attachUniforms","name1","uniforms","material","entries","name","uniform","type","uniformInstances","push","getUniformLocation","program","vertexShaders","fragments","uniforms1","getShaderByType","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","error","getShaderInfoLog","getUniformVariableDeclarations","map","getDeclaration","prefix","vertexSource","Source","vertexShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","useProgram","Uniform","update","typeFn","transpose","name2","uniform1","excludeFrom","name_no_prefix","replace","charAt","toUpperCase","e5","float","int","vec2","vec3","vec4","mat4","PlaneGeometry","setTopology","e7","xSegCount","ySegCount","vertexCount","quadCount","attributes","uv","values","Float32Array","uvNorm","index","Uint16Array","e6","t1","orientation","geometry","position","o","r","segment_width","segment_height","yIndex","xIndex","l","createBuffer","Attribute","target","ARRAY_BUFFER","size","ELEMENT_ARRAY_BUFFER","UNSIGNED_SHORT","Mesh","e8","attributeInstances","attribute","e9","use","drawElements","wireframe","LINES","TRIANGLES","remove","filter","e10","mesh","e11","attach","bindBuffer","buffer","bufferData","STATIC_DRAW","e12","getAttribLocation","enableVertexAttribArray","vertexAttribPointer","normalized","e13","e14","FLOAT","a","modelViewMatrix","$bbd9f92d73e75074$var$e","object","propertyName","val","defineProperty","configurable","writable","async","shaderFiles","vertex","noise","blend","fragment","conf","presetName","density","zoom","rotation","playing","querySelectorAll","minigl","el","requestAnimationFrame","computedCanvasStyle","getComputedStyle","waitForCssVars","disconnect","scrollObserver","window","removeEventListener","handleScroll","handleMouseDown","handleMouseUp","handleKeyDown","resize","initMaterial","u_time","u_shadow_power","u_darken_top","dataset","jsDarkenTop","u_active_colors","activeColors","u_global","noiseFreq","freqX","freqY","noiseSpeed","u_vertDeform","incline","sin","angle","cos","offsetTop","offsetBottom","noiseAmp","amp","noiseFlow","noiseSeed","seed","u_baseColor","sectionColors","u_waveLayers","e15","color","noiseFloor","noiseCeil","initMesh","shouldSkipFrame","e16","hidden","parseInt","updateFrequency","e17","toggleColor","showGradientLegend","minWidth","isGradientLegendVisible","body","classList","add","hideGradientLegend","init","initGradientColors","animate","addEventListener","getPropertyValue","addIsLoadedClass","cssVarRetries","maxCssVarRetries","cssPropertyName","hex","trim","hexTemp1","substr","split","hexTemp","Boolean","clearTimeout","scrollingTimeout","setTimeout","handleScrollEnd","scrollingRefreshDelay","isScrolling","pause","isIntersecting","play","innerWidth","ceil","e18","isMetaKey","metaKey","isMouseDown","e19","min","last","e20","isStatic","isLoadedClass","parentElement","selector","querySelector","connect","initGradient"],"version":3,"file":"index.83b0a5ef.js.map"}